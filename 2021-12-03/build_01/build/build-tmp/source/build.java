/* autogenerated by Processing revision 1276 on 2021-12-03 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int[] palette = {0xFFFFFFFF,0xFFA500FA,0xFFFBA422,0xFF61FF82,0xFF55FFF5,0xFFFA7823};
boolean record = true;
float off = 0.0f;
int r = (int)random(palette.length);
 public void setup() {
	/* size commented out by preprocessor */;
	noFill();
	strokeWeight(5);
	stroke(0xFF000F41);
}
 public void draw() {
	background(0xFF000F41);
	pushMatrix();
	translate(width / 2, height / 2);
	rotate(TWO_PI * cos(off));
	recursion(0, 0, width - 100, 7);
	popMatrix();
	off += .05f;
	if (record) {saveFrame("../exports/frames/###.png"); if (frameCount >= TWO_PI * 10) exit();}
}
 public void recursion(float x, float y, float s, int l) {
	s = s * (sin(off));
	fill(palette[(r + l) % palette.length]);
	circle(x, y, s);
	fill(0xFF000F41);
	circle(x, y, s - 18);
	l--;
	if (l > 1) {
		recursion(x - s / 2, y + s / l, s / 2, l);
		recursion(x + s / 2, y - s / l, s / 2, l);
	}
}
 public void mousePressed() {
	println(frameCount);
}


  public void settings() { size(1080, 1920, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
