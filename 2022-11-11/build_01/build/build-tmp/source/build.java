/* autogenerated by Processing revision 1278 on 2022-11-11 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

float 	x, y, a, off;
int 	count 	= 10;
float 	rate 	= 0.01f;
int   col 	= 0xFFFF4059;
//
 public void setup() {
	/* size commented out by preprocessor */;
}
//
 public void draw() {
	translate(width / 2, height / 2);
	bg();
	for (int i = 1; i < count; i++) {
		randomSeed(i);
		// rotate(random(45));
		ring(width / count / 2 * i);
	}
	off += rate;
}
 public void ring(float r) {
	float circ = r * TWO_PI;
	// int c = int(circ / count * 4);
	int c = PApplet.parseInt(circ / 20);
	for (float i = 0; i < c; i++) {
		a = map(i, 0, c, 0, TWO_PI);
		float n = noise(r, cos(a) * PI, off);
		polar(a, r);
		strokeWeight(n * width / 3 / count);
		stroke(col, n * 255);
		point(x, y);
	}
}
 public void polar(float a, float r) {
	x = sin(a) * r;
	y = cos(a) * r;
}
 public void bg() {
	background(255);
	noFill();
	// polarGrid(count, count);
}
 public void polarGrid(float c, int s) {
	stroke(200);
	strokeWeight(1);
	for (float i = 0; i <= c; i++) {
		circle(0, 0, (width / c) * i);
	}
	for (float i = 0; i < s; i++) {
		a = map(i, 0, s, 0, TWO_PI);
		polar(a, width / 2);
		line(0, 0, x, y);
	}
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
