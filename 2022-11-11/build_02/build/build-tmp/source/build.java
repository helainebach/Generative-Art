/* autogenerated by Processing revision 1278 on 2022-11-11 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {



String 	pathDATA = "../../../0_data/";
String 	fileName;
PFont  	font;
float 	x, y, a, off;
int 	count 	= 12;
float 	rate 	= 0.04f;
int   c1 		= 0xFFFF347F;
int   c2 		= 0xFF4B34FF;
int   bg 		= 255;
String  t 		= "â‰‹";
//
 public void setup() {
	/* size commented out by preprocessor */;
	font = createFont(pathDATA + "fonts/Arial Unicode.ttf", 100);
	fileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	textFont (font);
}
//
 public void draw() {
	translate(width / 2, height / 2);
	bg();
	for (int i = 1; i < count; i++) {
		ring(width / count / 2 * i);
	}
	off += rate;
	record();
}
 public void ring(float r) {
	float circ = r * TWO_PI;
	int c = PApplet.parseInt(circ / (width * .05f));
	for (float i = 0; i < c; i++) {
		a = map(i, 0, c, 0, TWO_PI);
		float n = noise(r, cos(a) * PI, off);
		polar(a, r);
		fill(lerpColor(c1, c2, n));
		textSize(n * (width / count) * .9f);
		pushMatrix();
		translate(x, y);
		rotate(a * 2 + off);
		text(t, 0, 0);
		popMatrix();
	}
}
 public void polar(float a, float r) {
	x = sin(a) * r;
	y = cos(a) * r;
}
 public void bg() {
	background(bg);
	noFill();
}


 public void record() {
	saveFrame("../exports/" + fileName + "/###.png");
	if (frameCount > TWO_PI / rate*4) exit();
	println(frameCount+" / "+TWO_PI / rate*4);
}


  public void settings() { size(600, 600, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
