/* autogenerated by Processing revision 1278 on 2022-12-30 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int c = 12;
float a, inc;
 public void setup() {
	/* size commented out by preprocessor */;
	colorMode(HSB, 400);
	noStroke();
}
 public void draw() {
	float d = (float) sqrt((width / 2) * (width / 2) + (width / 2) * (width / 2)) * 2;
	for (int i = c; i > 3; --i) {
		pushMatrix ();
		translate  (width / 2, height / 2);
		rotate     (frameCount / (TWO_PI * 2) / i);
		pie        (0, 0, i * (d / c), i * c / 2);
		popMatrix  ();
	}

	float vidLength = 15;
	float fps       = 30;
	saveFrame("../exports/frames/###.png"); if (frameCount == vidLength * fps) exit();
}
 public void pie(float x, float y, float d, int c) {
	a 	= TWO_PI / c;
	inc = 0;
	for (int i = 0; i < c; i++) {
		int col1 = color(map(i, 0, c, 0, 400), map(d, width, 0, 100, 200), 400);
		int col2 = color(map(i, 0, c, 0, 400), map(d, width, 0, 300, 500), 400);
		if (i % 2 == 0) {
			fill(col1);
		} else {
			fill(col2);
		}
		arc(x, y, d, d, inc, inc + a);
		inc = inc + a;
	}
}


  public void settings() { size(800, 200, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
