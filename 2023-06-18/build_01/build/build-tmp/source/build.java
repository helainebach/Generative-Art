/* autogenerated by Processing revision 1278 on 2023-06-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import com.jogamp.opengl.GLProfile;
import processing.svg.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {


{
	GLProfile.initSingleton();
}



boolean exportSVG = false;
String  fileName;
int[] palette = {0xFFF3E3ED,0xFFFEC513,0xFFFE7434,0xFFEFA9EC,0xFF010300};
int closest;
PVector[] points = new PVector[20];
String pathDATA = "../../../0_data/";
 public void setup() {
	ellipseMode(CENTER);
	/* size commented out by preprocessor */;
	noFill();
	pickPoints();
}
 public void draw() {
	background(255);
	if (exportSVG) {
		fileName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		beginRecord(SVG, "../exports/svgs/" + fileName + ".svg");
	}
	for (int y = 10; y < height - 10; y++) {
		for (int x = 10; x < width - 10; x++) {
			float[] distances = new float[points.length];
			float min_d = width;
			for (int i = 0; i < points.length; i++) {
				PVector v = points[i];
				float z = mouseX;
				// float d = dist(x, y, z, v.x, v.y, v.z);
				float d = dist(x, y, v.x, v.y);
				distances[i] = d;
				if (d < min_d) {
					min_d = d;
					closest = i;
				}
			}
			int n = 0;
			float[] sorted = sort(distances);
			int noise = (int)sorted[n];
			int pix;
			if (closest % 3 == 0) {
				pix = 10;
			} else {
				pix = 25;
			}
			if (x % pix == 0 && y % pix == 0) {
				noStroke();
				fill(palette[closest % palette.length]);
				float size = map(noise, 0, 160, pix * .9f, 1);
				// println(noise);
				if (size > 3) circle(x, y, size);
			}
		}
	}
	if (exportSVG) {
		endRecord();
		exportSVG = false;
	}
}
 public void mousePressed() {
	exportSVG = true;
	pickPoints();
}
 public void pickPoints() {
	for (int i = 0; i < points.length; i++) {
		points[i] = new PVector(random(width), random(height), random(width / 2));
	}
}


  public void settings() { size(600, 600, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
