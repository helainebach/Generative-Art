/* autogenerated by Processing revision 1276 on 2022-01-01 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

// Genuary 2022 - Day 01
// Draw 10,000 of something.
String  pathDATA = "../../../0_data/";
int[] palette  = {0xFF0160B6,0xFF03A08F,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};
int  	bg 		 = 255;
int  	fg 		 = 0;
PFont   font;
//
 public void setup() {
	// noLoop();
	font = createFont(pathDATA + "fonts/ubuntu.ttf", 100);
	/* size commented out by preprocessor */;
	frameRate(8);
}
//
 public void draw() {
	bg();
	labels(frameCount * 8);
	drawingGrid();
	record();
}
//
 public void drawing(float x, float y, float s) {
	s = s * random(.5f, 1);
	pushMatrix();
	translate(x + random(-s*.1f, s*.1f), y + random(-s*.1f, s*.1f));
	for (int i = 0; i < 4; i++) {
		l(random(360), random(360), s);
	}
	noFill();
	stroke(fg);
	strokeWeight(5);
	circle(0, 0, s);
	for (int i = 0; i < 3; i++) {
		c(random(8) * PI / 4, s);
	}
	popMatrix();
}
 public void c(float r, float s) {
	fill(palette[(int)random(palette.length)]);
	noStroke();
	rotate(r);
	circle(s / 2, 0, s / random(5, 8));

}
 public void l(float a, float b, float s) {
	strokeWeight(3);
	stroke(palette[(int)random(palette.length)]);
	line(sin(a) * s / 2, cos(a) * s / 2, sin(b) * s / 2, cos(b) * s / 2);
}
//
 public void bg() {
	background(bg);
	stroke(fg);
	strokeWeight(2);
	line(width / 3, 0, width / 3, height);
	line(width / 3 * 2, 0, width / 3 * 2, height);
	line(0, height / 3, width, height / 3);
	line(0, height / 3 * 2, width, height / 3 * 2);
}
 public void labels(int n) {
	fill(fg);
	textAlign(CENTER, CENTER);
	textFont(font, 50);
	text(n + "/10000\nDRAWINGS", width / 2, height / 2);
}
 public void drawingGrid() {
	int c = 3;
	int cell   = width / c;
	for (int n = 0; n < c * c; n++) {
		int x  = (n % c) * cell + cell / 2;
		int y  = (n / c) * cell + cell / 2;
		noStroke();
		if (n != 4) drawing (x, y, cell * .75f);
	}
}
 public void record() {
	if (frameCount <= 10000 / 8) {
		saveFrame("../exports3/frames/###.png");
	} else {
		exit();
	}
}


  public void settings() { size(1080, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
