/* autogenerated by Processing revision 1276 on 2022-01-04 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int[] palette = {0xFF0160B6,0xFF03A08F,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};
int 	scl = 15;
float 	inc = .05f;
int 	cols, rows;
float 	xoff, yoff, zoff;
int 	c;

 public void setup() {
	/* size commented out by preprocessor */;
	cols = width / scl;
	rows = height / scl;
}
 public void draw() {
	background(palette[0]);
	yoff = 0.0f;
	for (int y = 0; y <= rows; y++) {
		xoff = 0.0f;
		for (int x = 0; x <= cols; x++) {
			float r = noise(xoff, yoff, zoff);
			pushMatrix();
			translate(x * scl, y * scl);
			PVector a = PVector.fromAngle(r * TWO_PI);
			a.mult(scl);
			noFill();
			if (r < .5f) {
				r = map(r, 0, .5f, -.5f, 1);
				c = lerpColor(palette[3], palette[1], (int)Math.round(r));
			} else {
				r = map(r, .5f, 1, 0, 1.5f);
				c = lerpColor(palette[0], palette[2], (int)Math.round(r));
			}
			stroke(c);
			strokeWeight(scl * .75f);
			strokeCap(SQUARE);
			line(0, 0, a.x, a.y);
			popMatrix();
			xoff += inc;
		}
		yoff += inc;
	}
	zoff += inc / 2;
	float vidLength = 5;
	float fps       = 30;
	saveFrame("../exports/frames2/###.png"); if (frameCount == vidLength*fps) exit();
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
