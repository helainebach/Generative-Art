/* autogenerated by Processing revision 1276 on 2022-01-09 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

// Genuary 2022 - Day 08
// Single curve only.

int[] palette = {0xFF0160B6,0xFF03A08F,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};
float   off = 1.0f;
int 	n = 15;
 public void setup() {
	/* size commented out by preprocessor */;
}
 public void draw() {
	background(palette[1]);
	stroke(palette[0]);
	grid(20);
	stroke(palette[0], 50);
	grid(40);
	noFill();
	beginShape();

	for (int i = 0; i <= n; i++) {
		float nX = noise(i) * width;
		float nY = noise(i, off) * height;
		float a  = sin(off * 10) * 1;
		int c  = lerpColor(palette[2], palette[3], a);

		stroke(c);
		strokeWeight(3);
		noFill();

		curveVertex(nX, nY);

		if (i == 1 || i == n - 1) {
			fill(c);
			circle(nX, nY, 10);
		}

	}
	endShape(OPEN);
	off += .003f;
	float vidLength = 15;
	float fps       = 30;
	saveFrame("../exports/frames/###.png"); if (frameCount == vidLength*fps) exit();
}

 public void grid(int count) {
	int area = count * count;
	int cell = width / count;
	for (int n = 0; n < area; n++) {
		int x = (n % count) * cell;
		int y = (n / count) * cell;
		noFill();
		strokeWeight(1);
		square(x, y, cell);
	}
}


  public void settings() { size(1080, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
