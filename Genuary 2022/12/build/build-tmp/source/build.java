/* autogenerated by Processing revision 1276 on 2022-01-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {


ArrayList<Circle> circles;
int[] palette  	= {0xFF0160B6,0xFF03A08F,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};

 public void setup() {
	/* size commented out by preprocessor */;
	circles = new ArrayList<Circle>();
}

 public void draw() {
	background(0);
	int total = 20;
	int count = 0;
	int attempts = 0;

	while (count <  total) {
		Circle newC = newCircle();
		if (newC != null) {
			circles.add(newC);
			count++;
		}
		attempts++;
		if (attempts > 1000) {
			noLoop();
			println("FINISHED");
			break;
		}
	}


	for (Circle c : circles) {
		if (c.growing) {
			if (c.edges()) {
				c.growing = false;
			} else {
				for (Circle other : circles) {
					if (c != other) {
						float d = dist(c.x, c.y, other.x, other.y);
						if (d - 10 < c.r + other.r) {
							c.growing = false;
							break;
						}
					}
				}
			}
		}
		c.show();
		c.grow();
	}
	saveFrame("../exports/frames/###.png");
}

 public Circle newCircle() {

	float x = random(width);
	float y = random(height);

	boolean valid = true;
	for (Circle c : circles) {
		float d = dist(x, y, c.x, c.y);
		if (d < c.r) {
			valid = false;
			break;
		}
	}

	if (valid) {
		return new Circle(x, y);
	} else {
		return null;
	}
}
class Circle {
  float x;
  float y;
  float r;
  int c;

  boolean growing = true;

  Circle(float x_, float y_) {
    x = x_;
    y = y_;
    r = 1;
    c = color(palette[(int)random(palette.length)]);
  }

   public void grow() {
    if (growing) {
      r = r + 0.5f;
    }
  }
  
   public boolean edges() {
    return (x + r > width || x -  r < 0 || y + r > height || y -r < 0);
  }

   public void show() {
    noStroke();
    fill(c);
    ellipse(x, y, r*2, r*2);
  }
}


  public void settings() { size(1080, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
