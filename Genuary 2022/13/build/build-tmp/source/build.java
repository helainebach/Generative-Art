/* autogenerated by Processing revision 1276 on 2022-01-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int[] palette = {0xFF0160B6,0xFF03A08F,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};
float   off 	= 0.0f;
float   rate 	= 2;
float   yoff, ystart;
 public void setup() {
	/* size commented out by preprocessor */;
	blendMode(EXCLUSION);
}
 public void draw() {
	background(0);
	grid(10);
	for (int i = -1; i < 10; i++) {
		fill(255);
		pushMatrix();
		if (i % 2 == 0) {
			yoff   = off * -2;
			ystart = 80;
		} else {
			yoff   = off * 2;
			ystart = -80;
		}
		translate((i * width / 10 + width / 20) + off, ystart + yoff);
		circle(0, 0, 40);
		popMatrix();
	}
	off += rate;
	if (off >= width / 10) {
		off = 0.0f;
	}
	float vidLength = 15;
	float fps       = 30;
	saveFrame("../exports/frames/###.png"); if (frameCount == vidLength*fps) exit();
}
 public void grid(int count) {
	int area = count * count;
	int cell = width / count;
	for (int n = 0; n < area; n++) {
		int x = (n % count) * cell;
		int y = (n / count) * cell;
		fill(palette[(int)(n + frameCount / (height / rate) ) % palette.length]);
		noStroke();
		square(x, y, cell);
	}
}


  public void settings() { size(800, 80); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
