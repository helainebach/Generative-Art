/* autogenerated by Processing revision 1276 on 2022-01-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int[] palette  	= {0xFF03A08F,0xFF0160B6,0xFFFFDD5E,0xFFFFA051,0xFFFF3C1B};
int  [][] sandpiles;
 public void setup() {
	/* size commented out by preprocessor */;
	sandpiles = new int[width][height];
	sandpiles[width / 2][height / 2] = 800000;
}
 public void draw() {
	frameRate(1);
	background(palette[0]);
	scale(2);
	show();
}
 public void topple() {
	int [][] nextpiles = new int[width][height];
	for (int x = 0; x < width; x++) {
		for (int y = 0; y < height; y++) {
			int num = sandpiles[x][y];
			if (num < 16) {
				nextpiles[x][y] = sandpiles[x][y];
			}
		}
	}
	for (int x = 0; x < width; x++) {
		for (int y = 0; y < height; y++) {
			int num = sandpiles[x][y];
			if (num >= 16) {
				nextpiles[x][y] += (num - 16);
				if (x + 1 < width)
					nextpiles[x + 1][y]+=4;
				if (x - 1 >= 0)
					nextpiles[x - 1][y]+=4;
				if (y + 1 < height)
					nextpiles[x][y + 1]+=4;
				if (y - 1 >= 0)
					nextpiles[x][y - 1]+=4;
			}
		}
	}
	sandpiles = nextpiles;
}
 public void render() {
	pushMatrix();
	scale(5.0f);
	loadPixels();
	for (int x = 0; x < width; x++) {
		for (int y = 0; y < height; y++) {
			int num = sandpiles[x][y];
			int col = palette[(1 + num) % palette.length];
			pixels[x + y * width] = col;
		}
	}
	updatePixels();
	popMatrix();
}
 public void show(){
	render();
	for (int i = 0; i < 1000; i++) {
		topple();
	}
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
