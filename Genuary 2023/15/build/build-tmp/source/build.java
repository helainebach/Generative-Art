/* autogenerated by Processing revision 1276 on 2023-01-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {



// 		  			0 black // 1 white // 2 yellow // 3 orange // 4 purple
int[] palette  = {0xFF010300,0xFFF3E3ED,0xFFFEC513,0xFFFE7434,0xFFEFA9EC};
String 	pathDATA = "../../../0_data/";
Table 	prompts;
String  folderName;
PFont 	font;
float 	off 	 = 0;
float   rate 	 = PI / 150;
int 	day 	 = 15;
//
 public void setup() {
	frameRate(30);
	/* size commented out by preprocessor */;
	folderName = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	font = createFont(pathDATA + "fonts/ubuntu.ttf", 20);
	prompts = loadTable("../../prompts.csv", "header");
	background(palette[1]);
}
 public void draw() {
	float x = width/2+sin(off/4)*width/3;
	float y = height/2+sin(off)*height/4;
	float w = map(Math.abs(sin(off)),0,1,20,5);
	int c = lerpColor(palette[4],palette[2],Math.abs(sin(off)));
	if(frameCount > TWO_PI*4 / rate) {
		strokeWeight(w+2);
		stroke(palette[1]);
	}else{
		strokeWeight(w);
		stroke(c);
	}

	if (frameCount%5==0) point(x,y);
	grid(20);
	sig(day, prompts.getString(day - 1, 0), true, 1, 4);
	off += rate;
	record();
}

 public void grid(int count){
	int area = count*count;
	int cell = width/count;
	for (int n = 0; n < area; n++) {
		int x = (n%count)*cell;
		int y = (n/count)*cell;
		stroke(palette[4]);
		noFill();
		strokeWeight(1);
		square(x,y,cell);
	}
}
 public void record() {
	saveFrame("../exports/" + folderName + "/###.png");
	if (frameCount > TWO_PI*8 / rate) exit();
}
 public void keyPressed() {
	switch (key) {
		case 'p':
		String fileName = new SimpleDateFormat("yyyyMMddHHmmss'.png'").format(new Date());
		saveFrame("../exports/" + folderName+"/"+fileName);
		break;
	}
}
 public void sig(int d, String prompt, boolean bg, int textCol, int bgCol) {
	String txt = "#genuary" + d + " // " + prompt + " // @helainebach";
	int n = txt.length();
	if (bg) {
		fill(palette[bgCol]);
		stroke(palette[bgCol]);
		strokeWeight(10);
		rect((width - 20) - n * 10, 20, n * 10, 20);
	}
	textFont(font);
	textAlign(RIGHT, TOP);
	fill(palette[textCol]);
	text(txt, width - 20, 20);
}


  public void settings() { size(1080, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
