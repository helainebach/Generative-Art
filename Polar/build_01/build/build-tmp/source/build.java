/* autogenerated by Processing revision 1278 on 2023-06-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int  	bg = 0;
int  	fg = 255;
int 	u  = 12;
float 	x, y, r;
 public void setup() {
	/* size commented out by preprocessor */;
	noFill();
}
 public void draw() {
	bg();
	r = map(mouseX, 0, width, 0, (u / 2) + 1);
	int n = (int)map(mouseY, 0, height, 3, u);
	beginShape();
	for (float i = 0; i <= TWO_PI; i = i + TWO_PI / n) {
		polar(i);
		stroke(255);
		strokeWeight(5);
		vertex(x, y);
	}
	endShape(CLOSE);
}
 public void grid(int count) {
	int area = count * count;
	int cell = width / count;
	for (int n = 0; n < area; n++) {
		int x = (n % count) * cell;
		int y = (n / count) * cell;
		strokeWeight(.2f);
		square(x, y, cell);
	}
	for (int i = 0; i <= count; i++) {
		strokeWeight(.5f);
		circle(width / 2, height / 2, i * cell * 2);
	}
}
 public void bg() {
	background(bg);
	stroke(75);
	grid(u);
}
 public void polar(float a) {
	x = width / 2 + sin(a) * r * (width / u);
	y = height / 2 + cos(a) * r * (width / u);
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
