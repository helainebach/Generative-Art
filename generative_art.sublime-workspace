{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"rand",
				"randomSeed"
			],
			[
				"no",
				"noFill"
			],
			[
				"for",
				"for\tfor"
			],
			[
				"PVe",
				"PVector\tPVector"
			],
			[
				"rect",
				"rect\trectMode"
			],
			[
				"sr",
				"stroke"
			],
			[
				"stroke",
				"stroke\tstrokeWeight"
			],
			[
				"grid",
				"grid\tgrid"
			],
			[
				"random",
				"random\trandomSeed"
			],
			[
				"push",
				"push\tpush-pop"
			],
			[
				"pr",
				"println"
			],
			[
				"Arr",
				"array\tArray"
			],
			[
				"case",
				"case\tcase"
			],
			[
				"red",
				"redraw"
			],
			[
				"mouse",
				"mouse\tmousePressed"
			],
			[
				"back",
				"background\tbackground"
			],
			[
				"swit",
				"switch\tswitch"
			],
			[
				"hell",
				"hello|world"
			],
			[
				"sq",
				"sqrt"
			],
			[
				"ima",
				"image"
			],
			[
				"gri",
				"grid"
			],
			[
				"sto",
				"strokeWeight"
			],
			[
				"obj",
				"object"
			],
			[
				"storke",
				"stroke"
			],
			[
				"palet",
				"palette"
			],
			[
				"frame",
				"framerate"
			],
			[
				"pve",
				"PVector"
			],
			[
				"set",
				"setup"
			],
			[
				"blen",
				"blend"
			],
			[
				"text",
				"text"
			],
			[
				"gr",
				"grid"
			],
			[
				"strok",
				"strokeWeight"
			],
			[
				"save",
				"save"
			],
			[
				"expo",
				"export"
			],
			[
				"pale",
				"palette"
			],
			[
				"frm",
				"framerate"
			],
			[
				"tex",
				"textFont"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					""
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Re-run sketch"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch (Processing 3 only)"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch fullscreen"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Export sketch as application"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Kill running sketches"
				]
			],
			[
				"Packages/Processing/Build Systems/Processing.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"vsket",
				"Build With: vsketch"
			],
			[
				"open file",
				"Formatter: Open Config Files"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"dele",
				"Delete Blank Lines"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"indent",
				"Indentation: Convert to Spaces"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"reinden",
				"Indentation: Reindent Lines"
			],
			[
				"forma",
				"Formatter: Beautify With ClangFormat"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"install c",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"color",
				"UI: Customize Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 144.0,
		"history":
		[
			"efdjwei"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/helainebach/Documents/GitHub/Generative-Art",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Boxes",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Boxes/build_01",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Chanukah 2021",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/00",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/00/build",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/03",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/05",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/05/build",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/08",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/08-draft",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/13-sorting",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/13-sorting/build",
		"/Users/helainebach/Documents/GitHub/Generative-Art/noiseDots",
		"/Users/helainebach/Documents/GitHub/Generative-Art/noiseDots/build_01",
		"/Users/helainebach/Documents/GitHub/Generative-Art/noiseDots/build_01/build",
		"/Users/helainebach/Documents/GitHub/Generative-Art/numbers"
	],
	"file_history":
	[
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/23/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/noiseDots/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/22-1/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/01/build/build-tmp/source/build 2.java",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/22/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/21/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/00/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/19/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/20/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/11/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/10/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/vsketch/samples/circular_patterns/sketch_circular_patterns.py",
		"/Users/helainebach/Documents/Processing/libraries/minim/examples/Basics/RecordAudioOutput/RecordAudioOutput.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/09/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/08/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/08/build 01/build 01.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/07/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/prompts.csv",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/truchet/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/05/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/02/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Genuary 2023/04/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/triominos/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/0_data/fonts/Gotham-Bold.otf",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Gradients/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/cross stitch/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-05-19/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/vsketch/hex/sketch_hex.py",
		"/Users/helainebach/Desktop/cover-teachable.txt",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/vsketch.sublime-build",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/blackrc.toml",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/htmltidyrc_xml.cfg",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/htmltidyrc_html.cfg",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/stylelintrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/yapfrc.yapf",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/terserrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/rubocoprc.yml",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/htmlminifierrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/eslintrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/beautyshrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/perltidyrc.cfg",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/csscombrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/phpcsfixerrc.php",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/jsonmaxrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/uncrustifyrc_objc.cfg",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/uncrustifyrc.cfg",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/jsbeautifyrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/prettierrc.json",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/clangformatrc.yaml",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/formatter.assets/config/cleancssrc.json",
		"/Users/helainebach/Documents/GitHub/Generative-Art/color comparer/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/rose/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-03-11/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Fizz Buzz/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Fizz Buzz/build_01/build/Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/squiggle path/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/03/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/guides/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/build_01/build/build.pde",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/guides-oct.sublime-snippet",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Tesalations/02/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-02-19/build_03/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-02-19/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-02-19/build_02/build/build.pde",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/grid-polar.sublime-snippet",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Valentines 2022/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/02_Resources/palettes/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-02-12/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-02-12/build_02/build/build.pde",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/export-plot-moving.sublime-snippet",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/blend-y variance.sublime-snippet",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/belnd-y variance.sublime-snippet",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/blend.sublime-snippet",
		"/Users/helainebach/Dropbox (Personal)/Generative-Art/truchet tiles/build_08/build/build.pde",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/redraw.sublime-snippet",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-01-31-Plotting/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Color Pages/build_01/exports/20220122104829/20220122104836.svg",
		"/Users/helainebach/Dropbox (Personal)/Generative-Art/truchet tiles/build_09/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/2022-01-23/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Polar/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Thrasio/build_03/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Thrasio/build_04/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Thrasio/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Thrasio/build_02/build/build.pde",
		"/Users/helainebach/Library/Application Support/Sublime Text/Packages/User/Snippets/dot-grid.sublime-snippet",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Chanukah 2021/build_02/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/Boxes/build_01/build/build.pde",
		"/Users/helainebach/Documents/GitHub/Generative-Art/02_Resources/Formatting Code"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"randArray",
			"255",
			"2",
			"1",
			"Bound",
			"bound",
			"b",
			"1",
			"x",
			"x1 = _x1;",
			"b.",
			"a.",
			"2",
			"1",
			"bg",
			"import java.text.SimpleDateFormat;\nimport java.util.Date;\n// \t\t  \t\t\t0 black // 1 white // 2 yellow // 3 orange // 4 purple\ncolor[] palette  = {#010300,#F3E3ED,#FEC513,#FE7434,#EFA9EC};\nString \tpathDATA = \"../../../0_data/\";\nTable \tprompts;\nString  folderName;\nPFont \tfont;\nfloat \toff \t = 0;\nfloat   rate \t = PI / 150;\nint \tday \t = 1;\nint \tcell, count, area;\nPImage  img;\nIntList order;\n//\nvoid setup() {\n\tfolderName \t= new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n\tfont \t\t= createFont(pathDATA + \"fonts/ubuntu.ttf\", 20);\n\tprompts \t= loadTable(\"../../prompts.csv\", \"header\");\n\timg \t\t= loadImage(pathDATA + \"/photo/coral.png\"); img.resize(width, height);\n\t//\n\tsize(1080, 1080);\n\tnoLoop();\n\t//\n\tcell \t\t= 108;\n\tcount \t\t= width / cell;\n\tarea \t\t= count * count;\n\torder \t\t= new IntList();\n\tfor (int n \t= 0; n < area; n++) {\n\t\tint x = (n % count) * cell;\n\t\tint y = (n / count) * cell;\n\t\tcolor c = img.get(x, y);\n\t\torder.append((int)brightness(c));\n\t}\n}\nvoid swap(IntList arr, int j, int a, int b) {\n\tint temp = a;\n\tarr.set(j, b);\n\tarr.set(j + 1, temp);\n}\nvoid draw() {\n\tif (i < order.size()) {\n\t\tfor (int j = 0; j < order.size() - i - 1; j++) {\n\t\t\tint a = order.get(j);\n\t\t\tint b = order.get(j + 1);\n\t\t\tif (a > b) {\n\t\t\t\tswap(order, j, a, b);\n\t\t\t}\n\t\t}\n\t\t// record();\n\t} else {\n\t\tnoLoop();\n\t\texit();\n\t}\n\ti++;\n\tfor (int n \t= 0; n < area; n++) {\n\t\tint x = (n % count) * cell;\n\t\tint y = (n / count) * cell;\n\t\tfill(lerpColor(palette[0], palette[1], map(order[n], 0, 255, 0, 1));\n\t\tnoStroke();\n\t\tsquare(x, y, cell);\n\t}\n\tsig(day, prompts.getString(day - 1, 0), true, 1, 4);\n\toff += rate;\n\t// record();\n}\nvoid record() {\n\tsaveFrame(\"../exports/\" + folderName + \"/###.png\");\n\tif (frameCount > TWO_PI / rate) exit();\n}\nvoid keyPressed() {\n\tswitch (key) {\n\tcase 'p':\n\t\tString fileName = new SimpleDateFormat(\"yyyyMMddHHmmss'.png'\").format(new Date());\n\t\tsaveFrame(\"../exports/\" + folderName + \"/\" + fileName);\n\t\tbreak;\n\t}\n}\nvoid sig(int d, String prompt, boolean bg, int textCol, int bgCol) {\n\tString txt = \"#genuary\" + d + \" // \" + prompt + \" // @helainebach\";\n\tint n = txt.length();\n\tif (bg) {\n\t\tfill(palette[bgCol]);\n\t\tstroke(palette[bgCol]);\n\t\tstrokeWeight(10);\n\t\trect((width - 20) - n * 10, 20, n * 10, 20);\n\t}\n\ttextFont(font);\n\ttextAlign(RIGHT, TOP);\n\tfill(palette[textCol]);\n\ttext(txt, width - 20, 20);\n}",
			"import java.text.SimpleDateFormat;\nimport java.util.Date;\n// \t\t  \t\t\t0 black // 1 white // 2 yellow // 3 orange // 4 purple\ncolor[] palette  = {#010300,#F3E3ED,#FEC513,#FE7434,#EFA9EC};\nString \tpathDATA = \"../../../0_data/\";\nTable \tprompts;\nString  folderName;\nPFont \tfont;\nfloat \toff \t = 0;\nfloat   rate \t = PI / 150;\nint \tday \t = 1;\nPImage  img;\nfloat \tcell;\n//\nvoid setup() {\n\tsize(1080, 1080);\n\tfolderName \t= new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n\tfont \t\t= createFont(pathDATA + \"fonts/ubuntu.ttf\", 20);\n\tprompts \t= loadTable(\"../../prompts.csv\", \"header\");\n\timg \t\t= loadImage(pathDATA + \"/photo/coral.png\"); img.resize(width, height);\n\tnoLoop();\n}\nvoid draw() {\n\tcell = 10;\n\tfor (int x = 0; x < width; x += cell) {\n\t\tfor (int y = 0; y < height; y += cell) {\n\t\t\tcolor c = img.get(x, y);\n\t\t\tc = lerpColor(palette[0], palette[1], map(brightness(c), 0, 255, 0, 1));\n\t\t\tfill(c);\n\t\t\tnoStroke();\n\t\t\tsquare(x, y, cell);\n\t\t}\n\t}\n\n\tint area = count * count;\n\tint cell = width / count;\n\tfor (int n = 0; n < area; n++) {\n\t\tint x = (n % count) * cell;\n\t\tint y = (n / count) * cell;\n\t\tsquare(x, y, cell);\n\t}\n\tsig(day, prompts.getString(day - 1, 0), true, 1, 4);\n\toff += rate;\n\t// record();\n}\nvoid record() {\n\tsaveFrame(\"../exports/\" + folderName + \"/###.png\");\n\tif (frameCount > TWO_PI / rate) exit();\n}\nvoid keyPressed() {\n\tswitch (key) {\n\tcase 'p':\n\t\tString fileName = new SimpleDateFormat(\"yyyyMMddHHmmss'.png'\").format(new Date());\n\t\tsaveFrame(\"../exports/\" + folderName + \"/\" + fileName);\n\t\tbreak;\n\t}\n}\nvoid sig(int d, String prompt, boolean bg, int textCol, int bgCol) {\n\tString txt = \"#genuary\" + d + \" // \" + prompt + \" // @helainebach\";\n\tint n = txt.length();\n\tif (bg) {\n\t\tfill(palette[bgCol]);\n\t\tstroke(palette[bgCol]);\n\t\tstrokeWeight(10);\n\t\trect((width - 20) - n * 10, 20, n * 10, 20);\n\t}\n\ttextFont(font);\n\ttextAlign(RIGHT, TOP);\n\tfill(palette[textCol]);\n\ttext(txt, width - 20, 20);\n}",
			"import java.text.SimpleDateFormat;\nimport java.util.Date;\n// \t\t  \t\t\t0 black // 1 white // 2 yellow // 3 orange // 4 purple\ncolor[] palette  = {#010300,#F3E3ED,#FEC513,#FE7434,#EFA9EC};\nString \tpathDATA = \"../../../0_data/\";\nTable \tprompts;\nString  folderName;\nPFont \tfont;\nfloat \toff \t = PI;\nfloat   rate \t = PI / 150;\nint \tday \t = 11;\n//\nvoid setup() {\n\tsize(1080, 1080);\n\tfolderName = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n\tfont = createFont(pathDATA + \"fonts/ubuntu.ttf\", 20);\n\tprompts = loadTable(\"../../prompts.csv\", \"header\");\n\tnoLoop();\n}\nvoid draw() {\n\tbackground(palette[3]);\n\tfor (int i = 1; i < 9; ++i) {\n\t\trectMode(CENTER);\n\t\tnoStroke();\n\t\tfill(palette[(int)random(3)]);\n\t\twrongRect(width / 2, width / 20 + width / 10 * i, width / 3 * 2, width / 20, width / 40);\n\t}\n\trectMode(CORNER);\n\tsig(day, prompts.getString(day - 1, 0), true, 1, 0);\n\toff += rate;\n\t// record();\n}\nvoid wrongRect(float x, float y, float w, float h, float o) {\n\tbeginShape();\n\tvertex(x - w / 2 + random(-o, o), y - h / 2 + random(-o, o));\n\tvertex(x + w / 2 + random(-o, o), y - h / 2 + random(-o, o));\n\tvertex(x + w / 2 + random(-o, o), y + h / 2 + random(-o, o));\n\tvertex(x - w / 2 + random(-o, o), y + h / 2 + random(-o, o));\n\tendShape(CLOSE);\n}\nvoid record() {\n\tsaveFrame(\"../exports/\" + folderName + \"/###.png\");\n\tif (frameCount > TWO_PI / rate) exit();\n}\nvoid keyPressed() {\n\tswitch (key) {\n\tcase 'p':\n\t\tString fileName = new SimpleDateFormat(\"yyyyMMddHHmmss'.png'\").format(new Date());\n\t\tsaveFrame(\"../exports/\" + folderName + \"/\" + fileName);\n\t\tbreak;\n\t}\n}\nvoid sig(int d, String prompt, boolean bg, int textCol, int bgCol) {\n\tString txt = \"#genuary\" + d + \" // \" + prompt + \" // @helainebach\";\n\tint n = txt.length();\n\tif (bg) {\n\t\tfill(palette[bgCol]);\n\t\tstroke(palette[bgCol]);\n\t\tstrokeWeight(10);\n\t\trect((width - 20) - n * 10, 20, n * 10, 20);\n\t}\n\ttextFont(font);\n\ttextAlign(RIGHT, TOP);\n\tfill(palette[textCol]);\n\ttext(txt, width - 20, 20);\n}",
			"30",
			"100, height - 100",
			"100, width - 100",
			"import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport ddf.minim.*;\nimport ddf.minim.ugens.*;\n// \t\t  \t\t\t0 black // 1 white // 2 yellow // 3 orange // 4 purple\ncolor[] palette  = {#010300,#F3E3ED,#FEC513,#FE7434,#EFA9EC};\nString \tpathDATA = \"../../../0_data/\";\nTable \tprompts;\nString  folderName;\nPFont \tfont;\nfloat \toff \t = 0;\nfloat   rate \t = PI / 150;\nint \tday \t = 10;\nMinim minim;\n\nAudioOutput   out;\nAudioRecorder recorder;\nAudioSample kick;\nAudioSample snare;\n//\nvoid setup() {\n\tsize(1080, 1080);\n\tfolderName = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n\tfont = createFont(pathDATA + \"fonts/ubuntu.ttf\", 20);\n\tprompts = loadTable(\"../../prompts.csv\", \"header\");\n\tminim = new Minim(this);\n\tkick = minim.loadSample(\"BD.mp3\", 512);\n\tsnare = minim.loadSample(\"SD.wav\", 512);\n}\nvoid draw() {\n\tbg();\n\tsig(day, prompts.getString(day - 1, 0), true, 1, 0);\n\toff += rate;\n\t// record();\n}\nvoid bg() {\n\tbackground(palette[3]);\n}\nvoid record() {\n\tsaveFrame(\"../exports/\" + folderName + \"/###.png\");\n\tif (frameCount > TWO_PI / rate) exit();\n}\nvoid keyPressed() {\n\tswitch (key) {\n\tcase 'p':\n\t\tString fileName = new SimpleDateFormat(\"yyyyMMddHHmmss'.png'\").format(new Date());\n\t\tsaveFrame(\"../exports/\" + folderName + \"/\" + fileName);\n\t\tbreak;\n\tcase 's':\n\t\tsnare.trigger();\n\t\tbreak;\n\tcase 'k':\n\t\tkick.trigger();\n\t\tbreak;\n\t}\n}\nvoid sig(int d, String prompt, boolean bg, int textCol, int bgCol) {\n\tString txt = \"#genuary\" + d + \" // \" + prompt + \" // @helainebach\";\n\tint n = txt.length();\n\tif (bg) {\n\t\tfill(palette[bgCol]);\n\t\tstroke(palette[bgCol]);\n\t\tstrokeWeight(10);\n\t\trect((width - 20) - n * 10, 20, n * 10, 20);\n\t}\n\ttextFont(font);\n\ttextAlign(RIGHT, TOP);\n\tfill(palette[textCol]);\n\ttext(txt, width - 20, 20);\n}",
			"snare",
			"r/2",
			"5/6",
			"6/5",
			"/2*3/5",
			"2",
			"r",
			"4/5",
			"3/4",
			"2",
			"5/4",
			"250",
			"radians(",
			"90",
			"270",
			"60",
			"270",
			"120",
			"radians",
			"import java.text.SimpleDateFormat;\nimport java.util.Date;\n// \t\t  \t\t\t0 black // 1 white // 2 yellow // 3 orange // 4 purple\ncolor[] palette  = {#010300,#F3E3ED,#FEC513,#FE7434,#EFA9EC};\nString \tpathDATA = \"../../../0_data/\";\nTable \tprompts;\nString  folderName;\nPFont \tfont;\nfloat \toff \t = 0;\nfloat   rate \t = PI / 150;\nint \tday \t = 8;\n//\nvoid setup() {\n\tsize(1000, 1000);\n\tfolderName = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n\tfont = createFont(pathDATA + \"fonts/ubuntu.ttf\", 20);\n\tprompts = loadTable(\"../../prompts.csv\", \"header\");\n}\nvoid draw() {\n\tbackground(palette[1]);\n\tguides();\n\tpushMatrix();\n\ttranslate(width / 2, height / 2+(mouseY - height / 2) * -1);\n\t// fill(palette[2]);\n\tstroke(palette[0]);\n\ttriangle(-200, 0, 200, 0, 0, -300);\n\tpopMatrix();\n\tsig(day, prompts.getString(day - 1, 0), true, 1, 4);\n\toff += rate;\n\t// record();\n}\nvoid guides () {\n\tstroke(palette[4]);\n\tstrokeWeight(1);\n\tnoFill();\n\tgrid(20);\n\tpolarGrid(10, 32);\n\tpushMatrix();\n\ttranslate(mouseX - 10, mouseY - 10);\n\tPVector p = new PVector(mouseX, mouseY);\n\tif (p.x <= width / 2) {\n\t\tp.x = (width / 2 - p.x) * -1;\n\t} else {\n\t\tp.x = p.x - width / 2;\n\t}\n\tif (p.y <= height / 2) {\n\t\tp.y = height / 2 - p.y;\n\t} else {\n\t\tp.y = (p.y - height / 2) * -1;\n\t}\n\tfill(palette[0]);\n\ttextAlign(RIGHT, BOTTOM);\n\ttext(int(p.x) + \",\" + int(p.y), 0, 0);\n\tpopMatrix();\n\tfill(palette[1], 150);\n\trectMode(CORNER);\n\tnoStroke();\n\tsquare(0, 0, width);\n}\nvoid polarGrid(float c, int s) {\n\tfloat d = (float) sqrt((width / 2) * (width / 2) + (width / 2) * (width / 2)) * 2;\n\tpushMatrix();\n\ttranslate(width / 2, height / 2);\n\tfor (float i = 0; i <= c; i++) {\n\t\tcircle(0, 0, (d / c) * i);\n\t}\n\tfor (float i = 0; i < s; i++) {\n\t\tfloat a = map(i, 0, s, 0, TWO_PI);\n\t\tfloat x = sin(a) * d / 2;\n\t\tfloat y = cos(a) * d / 2;\n\t\tif (i % 2 == 0) {\n\t\t\tstroke(palette[3]);\n\t\t\tif (i % 4 == 0) {\n\t\t\t\tstroke(palette[0]);\n\t\t\t}\n\t\t\tif (i == 3 || i--13 || i = 26) {\n\t\t\t\tstrokeWeight(2);\n\t\t\t}\n\t\t} else {\n\t\t\tstroke(palette[4]);\n\t\t}\n\t\tline(0, 0, x, y);\n\t}\n\tpopMatrix();\n}\nvoid grid(int count) {\n\tint area = count * count;\n\tfloat cell = width / count;\n\tfor (int n = 0; n < area; n++) {\n\t\tfloat x = (n % count) * cell;\n\t\tfloat y = (n / count) * cell;\n\t\tsquare(x, y, cell);\n\t}\n}\n///\nvoid record() {\n\tsaveFrame(\"../exports/\" + folderName + \"/###.png\");\n\tif (frameCount > TWO_PI / rate) exit();\n}\nvoid keyPressed() {\n\tswitch (key) {\n\tcase 'p':\n\t\tString fileName = new SimpleDateFormat(\"yyyyMMddHHmmss'.png'\").format(new Date());\n\t\tsaveFrame(\"../exports/\" + folderName + \"/\" + fileName);\n\t\tbreak;\n\t}\n}\nvoid sig(int d, String prompt, boolean bg, int textCol, int bgCol) {\n\tString txt = \"#genuary\" + d + \" // \" + prompt + \" // @helainebach\";\n\tint n = txt.length();\n\tif (bg) {\n\t\tfill(palette[bgCol]);\n\t\tstroke(palette[bgCol]);\n\t\tstrokeWeight(10);\n\t\trect((width - 20) - n * 10, 20, n * 10, 20);\n\t}\n\ttextFont(font);\n\ttextAlign(RIGHT, TOP);\n\tfill(palette[textCol]);\n\ttext(txt, width - 20, 20);\n}\n\nfloat hypo(float a, float b) {\n\tdouble c = Math.sqrt((a * a) + (b * b));\n\treturn (float)c;\n}",
			"width",
			"p.x",
			"540",
			"self.u",
			"u",
			"c1",
			"1",
			"col2",
			"col1",
			"int [][] colNum = new int[3][2];\nvoid setup() {\n\tsize(600, 600);\n\n}\n\nvoid draw() {\n\tbackground(0);\n\n}",
			"int",
			"// Write a program that prints the numbers from 1 to 100\n// But for multiples of three print “Fizz” instead of the number\n// for the multiples of five print “Buzz”\n// For numbers which are multiples of both three and five print “FizzBuzz”\nPFont myFont;\ncolor c;\nString s;\nboolean text = false;\nint t = 400;\ncolor[] palette = {#FFFFFF,#BFBFBF,#808080,#404040,#000000};\ncolor bg = palette[0];\nvoid setup() {\n\tsize(600, 600, P2D);\n\tnoLoop();\n\tnoStroke();\n\tmyFont = createFont(\"Gotham-Bold\", 10);\n\ttextFont(myFont);\n\trectMode(CENTER);\n\ttextAlign(CENTER, CENTER);\n}\nvoid draw() {\n\tbackground(bg);\n\tint count  = (int)Math.sqrt(t);\n\tint cell   = width / count;\n\tfor (int i = 0; i <= t; i++) {\n\t\tint x = (i % count) * cell + cell / 2;\n\t\tint y = (i / count) * cell + cell / 2;\n\t\tfill(0);\n\t\tif (i % 3 == 0 && i % 5 == 0) {\n\t\t\ts = \"FIZZ\\nBUZ\";\n\t\t\tc = palette[1];\n\n\t\t} else if (i % 3 == 0) {\n\t\t\ts = \"FIZZ\";\n\t\t\tc = palette[2];\n\n\t\t} else if (i % 5 == 0) {\n\t\t\ts = \"BUZ\";\n\t\t\tc = palette[3];\n\n\t\t} else {\n\t\t\ts = str(i);\n\t\t\tc = palette[4];\n\t\t}\n\t\tfill(c);\n\t\tsquare(x, y, cell * .75);\n\t\tif (text) {\n\t\t\tfill(bg);\n\t\t\ttext(s, x, y);\n\t\t\t\n\t\t}\n\t}\n}\nvoid sqrtList() {\n\tfor (int n = 0; n <= 1000; n++) {\n\t\tint square = (int)Math.sqrt(n);\n\t\tif (square * square == n) {\n\t\t\tprintln(n);\n\t\t}\n\t}\n}",
			"color ",
			"String ",
			"fill(0);\n\t\t\tsquare(x,y,cell*.75);",
			"i",
			"25",
			"0",
			"u",
			"w",
			"float d, seg, b, e, n, w;\nint l = 120;\nint s = 45;\nvoid setup() {\n\tsize(600, 600, P2D);\n\tnoFill();\n\tstrokeCap(SQUARE);\n\tw = width * .95;\n}\nvoid draw() {\n\n\tbackground(255);\n\ttranslate(width / 2, width / 2);\n\tfor (int j = l / 3; j < l; ++j) {\n\t\tfor (int i = 0; i < s; ++i) {\n\t\t\td = j * (w / l);\n\t\t\td = d - (w / l / 2);\n\t\t\tseg = TWO_PI / s;\n\t\t\tb = i * seg;\n\t\t\te = b + seg;\n\t\t\tn = noise(j / 10, i) * 2;\n\t\t\tstroke((int)(Math.floor(n)) * 255);\n\t\t\tarc(0, 0, d, d, b, e);\n\t\t}\n\t}\n}\n",
			"width",
			"c",
			"2",
			"3",
			"2",
			"ln",
			"a.length",
			"s",
			"w",
			"20",
			" - 1",
			"float",
			"5",
			"color  \tbg = 0;\ncolor  \tfg = 255;\nint \tu  = 12;\nfloat \tx, y, r;\n//\nvoid setup() {\n\tsize(600, 600);\n\tnoFill();\n\tbg();\n}\nvoid draw() {\n\tr = map(mouseX, 0, width, 0, (u / 2)+1);\n\tfloat n = map(mouseY, 0, height, 0, u);\n\tfor (float i = 0; i <= TWO_PI; i = i + TWO_PI / n) {\n\t\tpolar(i);\n\t\tstroke(255);\n\t\tstrokeWeight(5);\n\t\tpoint(x, y);\n\t}\n}\nvoid grid(int count) {\n\tint area = count * count;\n\tint cell = width / count;\n\tfor (int n = 0; n < area; n++) {\n\t\tint x = (n % count) * cell;\n\t\tint y = (n / count) * cell;\n\t\tstrokeWeight(.2);\n\t\tsquare(x, y, cell);\n\t}\n\tfor (int i = 0; i <= count; i++) {\n\t\tstrokeWeight(.5);\n\t\tcircle(width / 2, height / 2, i * cell * 2);\n\t}\n}\nvoid bg() {\n\tbackground(bg);\n\tstroke(75);\n\tgrid(u);\n}\nvoid polar(float a) {\n\tx = width / 2 + sin(a) * r * (width / u);\n\ty = height / 2 + cos(a) * r * (width / u);\n}\n",
			"int"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 46.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 27.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Processing/Build Systems/Processing.sublime-build",
	"project": "generative_art.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
